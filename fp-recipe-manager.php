<?php
/*
Plugin Name:  Family Planner Recipe Manager
Description: Control the input of new recipes
Version: 1.0
Author: Corey O'Neil
*/
// check out jqueryui.com

if ( ! defined( 'ABSPATH' ) ) exit; //Exit is accessed directly

class RecipeManager {
	
	function __construct() {
		global $wpdb;
		$wpdb->ingredients = "{$wpdb->prefix}ingredients";
		$wpdb->cooking = "{$wpdb->prefix}cooking_instructions";
		register_activation_hook(__FILE__, [$this, 'init']);
		add_action("wp_enqueue_scripts", [$this, "enqueue"]); // Enque Script and Styles        
		add_action("wp_ajax_rm_enter_data", [$this, "write"]); // Ajax Method
		add_shortcode("rm-form", [$this, "form"]);
		
	}
	


	function init() {
		global $wpdb;
		$charset_collate = $wpdb->get_charset_collate();
		require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );
		
		if ($wpdb->get_var("SHOW TABLES LIKE '{$wpdb->ingredients}'") != $wpdb->ingredients) {
			$sql = "CREATE TABLE {$wpdb->ingredients} (
				`id` INT PRIMARY KEY AUTO_INCREMENT,
				`recipeID` INT(11) NOT NULL,
				`Name` VARCHAR(50) NOT NULL,
				`amount` INT NOT NULL DEFAULT 0,
				`unit` VARCHAR(20)
			)$charset_collate";
			dbDelta($sql);
			}
		
		if ($wpdb->get_var("SHOW TABLES LIKE '{$wpdb->cooking}'") != $wpdb->cooking) {
			$sql = "CREATE TABLE {$wpdb->cooking} (
				`id` INT PRIMARY KEY AUTO_INCREMENT,
				`recipeID` INT(11) NOT NULL,
				`time` VARCHAR(50) NOT NULL,
				`instruction` TEXT NOT NULL
			)$charset_collate";
			dbDelta($sql);
			}
	}

	function enqueue() {
		wp_enqueue_style( //Load in CSS
			"rm_style",
			plugin_dir_url(__FILE__) . "main.css",
			null
		);
		wp_enqueue_script(
			"rm_script",
			plugin_dir_url(__FILE__) . "main.js",
			['jquery']
		);
		wp_localize_script(
			"rm_script", "ajax", [
				"url" => admin_url("admin-ajax.php"),
				"nonce" => wp_create_nonce("fp_nonce_key")
			]
			);
	}

	function write() {
		check_ajax_referer('fp_nonce_key', 'security');
		error_log(print_r($_POST, true));
		// error_log(print_r($_FILES, true));

		// FIle upload Handler
		if ( ! function_exists( 'wp_handle_upload' ) ) {
			require_once( ABSPATH . 'wp-admin/includes/file.php' );
		}
		
		$uploadedfile = $_FILES['picture-upload'];
		
		$upload_overrides = array( 'test_form' => false );
		
		$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );
		
		if ( $movefile && ! isset( $movefile['error'] ) ) {
			error_log(print_r($movefile, true));
		} else {
			/**
			 * Error generated by _wp_handle_upload()
			 * @see _wp_handle_upload() in wp-admin/includes/file.php
			 */
			// error_log( $movefile['error'] );
		}


		//-----------------------------------------------------------------
		$upload_id = wp_insert_attachment( [
				'guid'           => $movefile['file'], 
				'post_mime_type' => mime_content_type( $movefile['file'] ),
				'post_title'     => preg_replace( '/\.[^.]+$/', '', $_FILES["picture-upload"]['name'] ),
				'post_content'   => '',
				'post_status'    => 'inherit'
			], $movefile['file'], $recipe_id
		);
 
		// wp_generate_attachment_metadata() won't work if you do not include this file
		require_once( ABSPATH . 'wp-admin/includes/image.php' );
	
		// Generate and save the attachment metas into the database
		wp_update_attachment_metadata( $upload_id, wp_generate_attachment_metadata( $upload_id, $movefile['file'] ) );

		gettype ($movefile['file']);

		//STEP 1: Write form data into an associated array
		$form_data = $_POST; // Create an empty array
		
		
		//STEP:2 Create Recipe Post and get its ID
		$pod=pods('fp_recipe');
		$data = [
			'post_title' => $form_data['dish-name'],
			'serving_size' => $form_data['serving-size'],
			'fp_meal_type' => $form_data['meal'],
			'post_status' => 'publish'
		];
		$recipe_id = $pod->add($data);
		
		set_post_thumbnail($recipe_id, $upload_id);
		// error_log(print_r($form_data, true));
		//STEP:3 Write ingredients and Instructinos to thier table
		global $wpdb;
		$ingredients_table = "{$wpdb->prefix}ingredients";
		$cooking_table = "{$wpdb->prefix}cooking_instructions";
		
		for ($i=0; $i < count($form_data['quantity']); $i++) { 
			$data = [
				'recipeID' => $recipe_id,
				'Name' => $form_data['ingredient'][$i],
				'amount' => $form_data['quantity']{$i},
				'unit' => $form_data['unit'][$i]
				
			];
			$results = $wpdb->insert(
				$ingredients_table,
				$data,
				['%d', '%s', '%d', '%s']
			);
		
			if (false === $results) {
			error_log("Ingredients insert failed for:" . print_r($data, true));
				wp_send_json([
					"success" => False
				]);
			}
		}
		for ($i=0; $i < count($form_data['time']); $i++) { 
			$data = [
				'recipeID' => $recipe_id,
				'time' => $form_data['time'][$i],
				'instruction' => $form_data['instruction'][$i]
			 ];
			$results = $wpdb->insert(
				$cooking_table,
				$data,
				['%d', '%s', '%s']
			);

			if (false === $results) {
				error_log("Cooking insert failed for" . print_r($data, true));
				wp_send_json([
					"success" => False
				]);
			}

			
		}



		wp_die();
	}

	function form($atts, $content = null) {
		ob_start();
		?>
		
		<!-- <button class="open-button" onclick="openForm()">New Recipe</button> -->
	
		<!-- <div class="form-popup" id="myForm"> -->
			<form method="post" action="<?php echo get_permalink($_GET['source']); ?>" class="form-container rm-form" enctype="multipart/form-data">
				<div><label for="rm-dish-name-field">Name of Dish:</label><input type="text" name="dish-name" id="rm-dish-name-field"></div>
				<div class="row fp-ing-cook">
					<div class="column parent">
						<div class="row fp-ingredients repeatable">
							<div class="columnq">
								<input type="text" placeholder="Quantity" name="quantity[]" id="rm-quantity-type-field">
							</div>
							<div class="columnu">
								<input type="text" placeholder="Unit" name="unit[]" id="rm-unit-type-field">
							</div>
							<div class="columni">
								<input type="text" placeholder="Ingredient" name="ingredient[]" id="rm-ingredient-type-field">
							</div>
							<div class="columnb">
								<button type="submit" class="next-ingredient">+</button>
							</div>
						</div>
						
					</div>
					<div class="column firstInstruction">
					<div class="row fp-ingredients nextInstruction">
							<div class="columnt">
								<input type="text" placeholder="Cooking Time" name="time[]" id="rm-time-type-field">
							</div>  
							<div class="columnin">
								<input type="text" placeholder="Instruction" name="instruction[]" id="rm-instruction-type-field">
							</div>
							<div class="columnb">
								<button type="submit" class="cookingInstruction">+</button>
							</div>
						</div>
						
						<!-- <div class="fp-inco"><label for="rm-ingredients-field">Ingredients:</label><input type="text" name="ingredients" id="rm-ingredients-field"></div> -->
						<!-- <div class="fp-inco"><label for="rm-cooking-instructions-field">Cooking Instructions:</label><input type="text" name="cooking-instructions" id="rm-cooking-instructions-field"></div> -->
					</div>
				</div>
					<div class="pic-upload"><label for="rm-picture-upload-field">Select an Image:</label><input type="file" name="picture-upload" id="rm-picture-upload-field"></div>
					<div class="fp_mealt">
					<?php
					$meal_types= get_terms([
						'taxonomy'  => 'fp_meal_type',
						'hide_empty' => false
					]);
					foreach($meal_types as $mt):
					?>
					<input type="checkbox" name="meal[]" id="meal-type-<?php echo $mt->term_id; ?>" value="<?php echo $mt->term_id;?>"><label for="meal-type-<?php echo $mt->term_id; ?>"><?php echo $mt->name;?></label>
					<?php
					endforeach;
					
					?>
					</div>
					<div><label for="rm-serving-size-field">Serving Size:</label><input type="number" name="serving-size" id="rm-serving-size-field" min="1"></div>
				<button type="submit" class="btn">Submit</button>
				
			</form>
		<!-- </div> -->
		
		<?php
		
			return ob_get_clean();
	}


	
}
new RecipeManager();